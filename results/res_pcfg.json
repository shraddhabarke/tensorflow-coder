{
    "benchmark_name": "ALL",
    "notes": "",
    "num_benchmarks": 69,
    "num_solved": 66,
    "results": [
        {
            "name": "stackoverflow_01",
            "operations": [
                "tf.transpose(a)",
                "tf.broadcast_to(input, shape)"
            ],
            "solution": "tf.transpose(tf.broadcast_to(in1, (2, 3, 2)))",
            "solution_weight": 24,
            "solved": true,
            "time": 0.32541450099961367
        },
        {
            "name": "stackoverflow_02",
            "operations": [
                "tf.minimum(x, y)",
                "tf.abs(x)"
            ],
            "solution": "tf.minimum(in1, tf.abs(-1))",
            "solution_weight": 24,
            "solved": true,
            "time": 0.23613629199098796
        },
        {
            "name": "stackoverflow_03",
            "operations": null,
            "solution": null,
            "solution_weight": null,
            "solved": false,
            "time": null
        },
        {
            "name": "stackoverflow_04",
            "operations": [
                "tf.gather_nd(params, indices)",
                "tf.stack(values, axis)",
                "PairCreationOperation"
            ],
            "solution": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
            "solution_weight": 41,
            "solved": true,
            "time": 95.29869650200999
        },
        {
            "name": "stackoverflow_05",
            "operations": [
                "tf.tensordot(a, b, axes)"
            ],
            "solution": "tf.tensordot(in1, in2, 1)",
            "solution_weight": 14,
            "solved": true,
            "time": 0.2934612919925712
        },
        {
            "name": "stackoverflow_06",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.equal(x, y)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
            "solution_weight": 18,
            "solved": true,
            "time": 0.08747041599417571
        },
        {
            "name": "stackoverflow_08",
            "operations": [
                "tf.boolean_mask(tensor, mask)",
                "tf.greater(x, y)",
                "tf.ones_like(input)"
            ],
            "solution": "tf.boolean_mask(in2, tf.greater(in1, tf.ones_like(in1)))",
            "solution_weight": 25,
            "solved": true,
            "time": 0.5721893340087263
        },
        {
            "name": "stackoverflow_09",
            "operations": [
                "IndexingOperation",
                "tf.unique_with_counts(x)"
            ],
            "solution": "tf.unique_with_counts(in1)[1]",
            "solution_weight": 25,
            "solved": true,
            "time": 0.2148796260007657
        },
        {
            "name": "stackoverflow_10",
            "operations": [
                "tf.matmul(a, b)",
                "tf.expand_dims(input, axis)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
            "solution_weight": 24,
            "solved": true,
            "time": 0.9323921670002164
        },
        {
            "name": "stackoverflow_11",
            "operations": [
                "tf.math.bincount(arr)"
            ],
            "solution": "tf.math.bincount(in1)",
            "solution_weight": 8,
            "solved": true,
            "time": 0.03223858299315907
        },
        {
            "name": "stackoverflow_12",
            "operations": [
                "tf.gather(params, indices, axis, batch_dims)",
                "tf.argmin(input, axis)"
            ],
            "solution": "tf.gather(in1, tf.argmin(in1, axis=-1), axis=-1, batch_dims=0)",
            "solution_weight": 35,
            "solved": true,
            "time": 4.837677628005622
        },
        {
            "name": "stackoverflow_13",
            "operations": [
                "tf.tensordot(a, b, axes)",
                "PairCreationOperation"
            ],
            "solution": "tf.tensordot(in1, in2, (1, 1))",
            "solution_weight": 32,
            "solved": true,
            "time": 9.520130837001489
        },
        {
            "name": "stackoverflow_14",
            "operations": [
                "tf.reduce_any(input_tensor, axis)"
            ],
            "solution": "tf.reduce_any(in1, axis=2)",
            "solution_weight": 12,
            "solved": true,
            "time": 0.041368874997715466
        },
        {
            "name": "stackoverflow_15",
            "operations": [
                "tf.minimum(x, y)",
                "tf.math.squared_difference(x, y)",
                "tf.square(x)"
            ],
            "solution": "tf.minimum(in1, tf.math.squared_difference(in1, tf.square(in1)))",
            "solution_weight": 33,
            "solved": true,
            "time": 2.6977401680051116
        },
        {
            "name": "stackoverflow_16",
            "operations": [
                "tf.multiply(x, y)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.multiply(in1, tf.expand_dims(in2, 1))",
            "solution_weight": 18,
            "solved": true,
            "time": 0.08077295900147874
        },
        {
            "name": "stackoverflow_17",
            "operations": [
                "tf.stack(values, axis)",
                "PairCreationOperation"
            ],
            "solution": "tf.stack((in1, in1), axis=1)",
            "solution_weight": 26,
            "solved": true,
            "time": 0.48316437601170037
        },
        {
            "name": "stackoverflow_18",
            "operations": [
                "tf.add(x, y)",
                "tf.matmul(a, b)"
            ],
            "solution": "tf.add(in3, tf.matmul(in1, in2))",
            "solution_weight": 18,
            "solved": true,
            "time": 0.10435995900479611
        },
        {
            "name": "stackoverflow_19",
            "operations": [
                "tf.gather(params, indices)",
                "tf.argsort(values, axis, stable=True)",
                "tf.reduce_prod(input_tensor, axis)",
                "tf.math.cumsum(x, axis)"
            ],
            "solution": "tf.gather(in1, tf.argsort(tf.reduce_prod(tf.math.cumsum(in1, axis=1), axis=1), axis=0, stable=True))",
            "solution_weight": 43,
            "solved": true,
            "time": 223.7441931009962
        },
        {
            "name": "stackoverflow_20",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.one_hot(indices, depth)",
                "tf.argmax(input, axis)"
            ],
            "solution": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
            "solution_weight": 22,
            "solved": true,
            "time": 0.5594039999996312
        },
        {
            "name": "stackoverflow_21",
            "operations": [
                "tf.gather(params, indices, axis, batch_dims)"
            ],
            "solution": "tf.gather(in2, in1, axis=1, batch_dims=1)",
            "solution_weight": 19,
            "solved": true,
            "time": 0.25703991699265316
        },
        {
            "name": "stackoverflow_22",
            "operations": [
                "tf.tensordot(a, b, axes)",
                "tf.cast(x, dtype)"
            ],
            "solution": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
            "solution_weight": 26,
            "solved": true,
            "time": 1.3965787090128288
        },
        {
            "name": "stackoverflow_23",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.reduce_max(input_tensor, axis)",
                "tf.one_hot(indices, depth)"
            ],
            "solution": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
            "solution_weight": 29,
            "solved": true,
            "time": 1.840776916986215
        },
        {
            "name": "stackoverflow_24",
            "operations": [
                "tf.where(condition, x, y)",
                "tf.cast(x, dtype)",
                "tf.math.divide_no_nan(x, y)"
            ],
            "solution": "tf.where(tf.cast(in2, tf.bool), x=tf.math.divide_no_nan(in1, in2), y=in1)",
            "solution_weight": 40,
            "solved": true,
            "time": 164.50889090800774
        },
        {
            "name": "stackoverflow_25",
            "operations": [
                "tf.tile(input, multiples)",
                "tf.eye(num_rows)",
                "PairCreationOperation"
            ],
            "solution": "tf.tile(tf.eye(in1), (in2, 1))",
            "solution_weight": 26,
            "solved": true,
            "time": 1.0859084170078859
        },
        {
            "name": "stackoverflow_26",
            "operations": [
                "tf.reduce_sum(input_tensor, axis)",
                "tf.reduce_sum(input_tensor, axis)"
            ],
            "solution": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
            "solution_weight": 26,
            "solved": true,
            "time": 1.0209740420104936
        },
        {
            "name": "stackoverflow_27",
            "operations": [
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)",
                "tf.ones_like(input)"
            ],
            "solution": "tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, in2)",
            "solution_weight": 22,
            "solved": true,
            "time": 0.28989512599946465
        },
        {
            "name": "stackoverflow_28",
            "operations": [
                "tf.squeeze(input)",
                "tf.gather(params, indices, axis, batch_dims)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=2, batch_dims=1))",
            "solution_weight": 39,
            "solved": true,
            "time": 85.81760658000712
        },
        {
            "name": "stackoverflow_29",
            "operations": [
                "tf.searchsorted(sorted_sequence, values, side='left')"
            ],
            "solution": "tf.searchsorted(in1, in2, side='left')",
            "solution_weight": 13,
            "solved": true,
            "time": 0.07270099999732338
        },
        {
            "name": "stackoverflow_30",
            "operations": null,
            "solution": null,
            "solution_weight": null,
            "solved": false,
            "time": null
        },
        {
            "name": "stackoverflow_31",
            "operations": [
                "tf.reduce_sum(input_tensor)",
                "tf.math.squared_difference(x, y)",
                "tf.sparse.to_dense(sp_input)"
            ],
            "solution": "tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "solution_weight": 19,
            "solved": true,
            "time": 0.32595683399995323
        },
        {
            "name": "stackoverflow_32",
            "operations": [
                "tf.reduce_sum(input_tensor, axis)",
                "tf.repeat(input, repeats, axis)",
                "tf.range(start)"
            ],
            "solution": "tf.reduce_sum(tf.repeat(in1, tf.range(4), axis=1), axis=1)",
            "solution_weight": 38,
            "solved": true,
            "time": 78.72647916100686
        },
        {
            "name": "stackoverflow_33",
            "operations": [
                "tf.reduce_min(input_tensor, axis)",
                "tf.reduce_sum(input_tensor, axis)",
                "tf.math.squared_difference(x, y)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.reduce_min(tf.reduce_sum(tf.math.squared_difference(in1, tf.expand_dims(in2, 1)), axis=-1), axis=1)",
            "solution_weight": 40,
            "solved": true,
            "time": 515.8911370279966
        },
        {
            "name": "stackoverflow_34",
            "operations": [
                "tf.tensordot(a, b, axes)"
            ],
            "solution": "tf.tensordot(in2, in1, 1)",
            "solution_weight": 14,
            "solved": true,
            "time": 1.0335013339936268
        },
        {
            "name": "stackoverflow_35",
            "operations": [
                "tf.add(x, y)",
                "tf.multiply(x, y)",
                "tf.expand_dims(input, axis)",
                "tf.subtract(x, y)"
            ],
            "solution": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
            "solution_weight": 34,
            "solved": true,
            "time": 91.50245324900607
        },
        {
            "name": "stackoverflow_36",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.divide(x, y)",
                "tf.math.cumsum(x, axis)",
                "tf.ones_like(input)"
            ],
            "solution": "tf.cast(tf.divide(in1, tf.math.cumsum(tf.ones_like(in1), axis=0)), tf.float32)",
            "solution_weight": 29,
            "solved": true,
            "time": 1.840257959003793
        },
        {
            "name": "stackoverflow_37",
            "operations": [
                "tf.tensordot(a, b, axes)"
            ],
            "solution": "tf.tensordot(in1, in2, 1)",
            "solution_weight": 13,
            "solved": true,
            "time": 0.10868445900268853
        },
        {
            "name": "stackoverflow_38",
            "operations": [
                "tf.reduce_prod(input_tensor, axis)",
                "tf.maximum(x, y)",
                "tf.ones_like(input)",
                "tf.multiply(x, y)"
            ],
            "solution": "tf.reduce_prod(tf.maximum(tf.ones_like(in1), tf.multiply(in1, in2)), axis=1)",
            "solution_weight": 41,
            "solved": true,
            "time": 139.11572014600097
        },
        {
            "name": "stackoverflow_39",
            "operations": [
                "tf.multiply(x, y)",
                "tf.square(x)",
                "tf.math.floor(x)",
                "tf.sqrt(x)",
                "tf.abs(x)"
            ],
            "solution": "tf.multiply(tf.square(in1), tf.math.floor(tf.sqrt(tf.abs(in1))))",
            "solution_weight": 38,
            "solved": true,
            "time": 96.70853437700134
        },
        {
            "name": "stackoverflow_40",
            "operations": [
                "tf.scatter_nd(indices, updates, shape)"
            ],
            "solution": "tf.scatter_nd(in2, in1, (3, 5))",
            "solution_weight": 19,
            "solved": true,
            "time": 0.3265309580019675
        },
        {
            "name": "stackoverflow_41",
            "operations": [
                "tf.boolean_mask(tensor, mask)",
                "tf.not_equal(x, y)",
                "tf.constant(value)",
                "tf.range(start)"
            ],
            "solution": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
            "solution_weight": 35,
            "solved": true,
            "time": 16.60683521500323
        },
        {
            "name": "stackoverflow_42",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.equal(x, y)",
                "tf.reduce_max(input_tensor)"
            ],
            "solution": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "solution_weight": 14,
            "solved": true,
            "time": 0.04676366699277423
        },
        {
            "name": "stackoverflow_43",
            "operations": [
                "tf.gather_nd(params, indices, batch_dims)",
                "tf.transpose(a)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
            "solution_weight": 36,
            "solved": true,
            "time": 38.7165541019931
        },
        {
            "name": "stackoverflow_44",
            "operations": [
                "tf.math.segment_sum(data, segment_ids)",
                "tf.repeat(input, repeats)",
                "tf.range(start)"
            ],
            "solution": "tf.math.segment_sum(in1, tf.repeat(tf.range(4), 2))",
            "solution_weight": 43,
            "solved": true,
            "time": 277.07993125099165
        },
        {
            "name": "stackoverflow_45",
            "operations": [
                "tf.where(condition, x, y)",
                "tf.sequence_mask(lengths)",
                "tf.roll(input, shift, axis)"
            ],
            "solution": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
            "solution_weight": 37,
            "solved": true,
            "time": 48.02353364700684
        },
        {
            "name": "stackoverflow_46",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.repeat(input, repeats)",
                "tf.where(condition)"
            ],
            "solution": "tf.cast(tf.repeat(tf.where(in1), in1), tf.int32)",
            "solution_weight": 18,
            "solved": true,
            "time": 0.211114459001692
        },
        {
            "name": "stackoverflow_47",
            "operations": [
                "tf.scatter_nd(indices, updates, shape)",
                "tf.where(condition)"
            ],
            "solution": "tf.scatter_nd(tf.where(in2), in1, (6, 5))",
            "solution_weight": 26,
            "solved": true,
            "time": 1.1928322919993661
        },
        {
            "name": "stackoverflow_48",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.argmin(input, axis)",
                "tf.math.squared_difference(x, y)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.cast(tf.argmin(tf.math.squared_difference(in1, tf.expand_dims(in2, 1)), axis=1), tf.int32)",
            "solution_weight": 38,
            "solved": true,
            "time": 46.04845197900431
        },
        {
            "name": "stackoverflow_49",
            "operations": [
                "tf.transpose(a)",
                "tf.multiply(x, y)",
                "tf.transpose(a)"
            ],
            "solution": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
            "solution_weight": 26,
            "solved": true,
            "time": 2.8471559179888573
        },
        {
            "name": "stackoverflow_50",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.one_hot(indices, depth)",
                "tf.repeat(input, repeats)"
            ],
            "solution": "tf.cast(tf.one_hot(tf.repeat(in3, in1), in2), tf.int32)",
            "solution_weight": 22,
            "solved": true,
            "time": 0.7496566670015454
        },
        {
            "name": "google_01",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.where(condition)",
                "tf.sequence_mask(lengths)",
                "tf.math.bincount(arr)"
            ],
            "solution": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
            "solution_weight": 25,
            "solved": true,
            "time": 1.3068248760100687
        },
        {
            "name": "google_03",
            "operations": [
                "tf.sparse.slice(sp_input, start, size)",
                "TripleCreationOperation"
            ],
            "solution": "tf.sparse.slice(in1, (0, 0, 0), (1, 2, 800))",
            "solution_weight": 30,
            "solved": true,
            "time": 1.947497625995311
        },
        {
            "name": "google_04",
            "operations": [
                "tf.reshape(tensor, shape)"
            ],
            "solution": "tf.reshape(in1, (4, 3, 2))",
            "solution_weight": 13,
            "solved": true,
            "time": 0.040195457986555994
        },
        {
            "name": "google_05",
            "operations": [
                "tf.repeat(input, repeats, axis)",
                "tf.expand_dims(input, axis)"
            ],
            "solution": "tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "solution_weight": 27,
            "solved": true,
            "time": 1.7779512510023778
        },
        {
            "name": "google_06",
            "operations": [
                "tf.math.segment_max(data, segment_ids)"
            ],
            "solution": "tf.math.segment_max(in2, in1)",
            "solution_weight": 11,
            "solved": true,
            "time": 0.039916749999974854
        },
        {
            "name": "google_07",
            "operations": null,
            "solution": null,
            "solution_weight": null,
            "solved": false,
            "time": null
        },
        {
            "name": "google_08",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.sequence_mask(lengths, maxlen)"
            ],
            "solution": "tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "solution_weight": 19,
            "solved": true,
            "time": 0.17620170798909385
        },
        {
            "name": "google_09",
            "operations": [
                "tf.gather(params, indices)",
                "tf.argsort(values, axis, stable=True)"
            ],
            "solution": "tf.gather(in2, tf.argsort(in1, axis=0, stable=True))",
            "solution_weight": 22,
            "solved": true,
            "time": 0.706947708997177
        },
        {
            "name": "google_11",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.math.count_nonzero(input, axis)",
                "tf.clip_by_value(t, clip_value_min, clip_value_max)"
            ],
            "solution": "tf.cast(tf.math.count_nonzero(tf.clip_by_value(in1, 0, 1), axis=1), tf.int32)",
            "solution_weight": 29,
            "solved": true,
            "time": 2.8505014600086724
        },
        {
            "name": "google_12",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.greater_equal(x, y)",
                "tf.square(x)"
            ],
            "solution": "tf.cast(tf.greater_equal(in1, tf.square(in1)), tf.int32)",
            "solution_weight": 19,
            "solved": true,
            "time": 0.15869695899891667
        },
        {
            "name": "google_13",
            "operations": [
                "tf.concat(values, axis)",
                "PairCreationOperation"
            ],
            "solution": "tf.concat((in1, in2), 1)",
            "solution_weight": 22,
            "solved": true,
            "time": 0.24683687499782536
        },
        {
            "name": "google_14",
            "operations": [
                "tf.roll(input, shift, axis)"
            ],
            "solution": "tf.roll(in1, 1, 1)",
            "solution_weight": 14,
            "solved": true,
            "time": 0.05585641699144617
        },
        {
            "name": "google_15",
            "operations": [
                "tf.pad(tensor, paddings, mode='CONSTANT')",
                "tf.tensordot(a, b, axes)",
                "tf.math.bincount(arr)",
                "tf.math.bincount(arr)"
            ],
            "solution": "tf.pad(in1, tf.tensordot(tf.math.bincount(1), tf.math.bincount(1), 0), mode='CONSTANT')",
            "solution_weight": 42,
            "solved": true,
            "time": 149.63925706800364
        },
        {
            "name": "google_16",
            "operations": [
                "tf.repeat(input, repeats)"
            ],
            "solution": "tf.repeat(in1, in2)",
            "solution_weight": 10,
            "solved": true,
            "time": 0.06511304099694826
        },
        {
            "name": "google_17",
            "operations": [
                "tf.where(condition, x, y)",
                "tf.multiply(x, y)",
                "tf.constant(value)"
            ],
            "solution": "tf.where(in1, x=in2, y=tf.multiply(in2, tf.constant(-10)))",
            "solution_weight": 29,
            "solved": true,
            "time": 1.0586874169966904
        },
        {
            "name": "google_18",
            "operations": [
                "tf.gather(params, indices)",
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)",
                "tf.reduce_max(input_tensor)"
            ],
            "solution": "tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in1)), in2)",
            "solution_weight": 25,
            "solved": true,
            "time": 0.7878700419969391
        },
        {
            "name": "google_19",
            "operations": [
                "tf.gather(params, indices, axis, batch_dims)",
                "tf.argsort(values, axis, stable=True)"
            ],
            "solution": "tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)",
            "solution_weight": 31,
            "solved": true,
            "time": 6.0666752950055525
        },
        {
            "name": "google_20",
            "operations": [
                "tf.searchsorted(sorted_sequence, values, side='left')",
                "tf.sort(values, axis)"
            ],
            "solution": "tf.searchsorted(tf.sort(in1, axis=0), in1, side='left')",
            "solution_weight": 29,
            "solved": true,
            "time": 1.3554911670071306
        },
        {
            "name": "google_21",
            "operations": [
                "tf.tensor_scatter_nd_update(tensor, indices, updates)",
                "tf.repeat(input, repeats)"
            ],
            "solution": "tf.tensor_scatter_nd_update(tensor, indices, tf.repeat(updates, 1))",
            "solution_weight": 30,
            "solved": true,
            "time": 6.43310379399918
        },
        {
            "name": "google_22",
            "operations": [
                "tf.cast(x, dtype)",
                "tf.where(condition)",
                "tf.math.count_nonzero(input, axis)",
                "tf.one_hot(indices, depth)"
            ],
            "solution": "tf.cast(tf.where(tf.math.count_nonzero(tf.one_hot(in1, 6), axis=1)), tf.int32)",
            "solution_weight": 38,
            "solved": true,
            "time": 74.53064345099847
        }
    ],
    "settings": {
        "algorithm_version": "Value search, TF-IDF (k=5, min_score=0.15), tensor features model with F_1 loss and max weighting, 2020/08/26",
        "description_handler_name": "tfidf_5_0.15",
        "max_extra_solutions_time": 10,
        "max_solutions": 1,
        "max_weight": 300,
        "only_minimal_solutions": true,
        "operations.limit_sparse_operations": true,
        "paper_experiments.skip_filtering": false,
        "paper_experiments.uniform_weights": false,
        "printing.all_apply": false,
        "printing.bad_solutions": false,
        "printing.deprioritized_operations": false,
        "printing.prioritized_operations": false,
        "printing.progress": false,
        "printing.statistics": false,
        "printing.statistics_sort_by_time": true,
        "printing.tensor_size_warnings": false,
        "printing.verbose": false,
        "require_all_inputs_used": true,
        "require_one_input_used": true,
        "tensor_model.checkpoint_path": "/usr/local/lib/python3.10/dist-packages/tensorflow_coder-0.0.5-py3.10.egg/tf_coder/models/trained_model/ckpt-1172",
        "tensor_model.config_path": "/usr/local/lib/python3.10/dist-packages/tensorflow_coder-0.0.5-py3.10.egg/tf_coder/models/trained_model/config.json",
        "tensor_model.deprioritize_multiplier": 1.25,
        "tensor_model.deprioritize_threshold": -1,
        "tensor_model.max_deprioritized": 100,
        "tensor_model.prioritize_multiplier": 0.75,
        "tensor_model.prioritize_threshold": 0.5,
        "timeout": 600
    },
    "solve_time_geometric_mean": 1.681309336732547,
    "solve_time_mean": 33.374218413606286,
    "solve_time_total": 2202.698415298015
}
